<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>cookie和session</title>
    <url>/2019/10/22/cookie%E5%92%8Csession/</url>
    <content><![CDATA[<p><center>*会话管理*</center></p>
<p><center>*管理浏览器客户端和服务器端之间会话过程中产生的会话数据*</center><br><a id="more"></a></p>
<h1 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h1><p>Cookie技术：会话数据保存在浏览器客户端。<br>Session技术：会话数据保存在服务器端。</p>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>读取已经设置好的cookies, 每个HttpRequest 对象都有一个 COOKIES 对象，该对象的行为类似一个字典，你可以使用它读取任何浏览器发送给视图（view）的cookies<br>写cookies， 需要使用 HttpResponse对象的 set_cookie()方法。 这儿有个基于 GET 参数来设置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class HttpResponseBase:</span><br><span class="line">    ....</span><br><span class="line">    def set_cookie(self, key, value=&apos;&apos;, max_age=None, expires=None, path=&apos;/&apos;,</span><br><span class="line">                   domain=None, secure=False, httponly=False):</span><br><span class="line">                   </span><br><span class="line">        # max_age=None 关闭网页就过期， 有效其时间，单位是秒</span><br><span class="line">        # expires 到期时间，是一个日期格式 </span><br><span class="line">        </span><br><span class="line">        self.cookies[key] = value</span><br><span class="line">        if expires is not None:</span><br><span class="line">            ......</span><br><span class="line">        if max_age is not None:</span><br><span class="line">            ......</span><br><span class="line">            </span><br><span class="line">    # 加盐设置cookie     </span><br><span class="line">    def set_signed_cookie(self, key, value, salt=&apos;&apos;, **kwargs):</span><br><span class="line">        value = signing.get_cookie_signer(salt=key + salt).sign(value)</span><br><span class="line">        return self.set_cookie(key, value, **kwargs)</span><br><span class="line">    </span><br><span class="line">    ##  response.set_signed_cookie(&quot;login&quot;, &quot;yes&quot;, salt=&quot;SSS&quot;)  设置key, value salt</span><br><span class="line">    </span><br><span class="line">    ##  获取Cookie</span><br><span class="line">    ##  request.COOKIES[&apos;key&apos;]</span><br><span class="line">    ##  request.get_signed_cookie(key, default=RAISE_ERROR, salt=&apos;&apos;, max_age=None)</span><br><span class="line">    ##  default: 默认值  salt: 加密盐  max_age: 后台控制过期时间</span><br><span class="line">        </span><br><span class="line">    # 删除cookie实际上是设置过期时间为基准点，关闭就过期</span><br><span class="line">    def delete_cookie(self, key, path=&apos;/&apos;, domain=None):</span><br><span class="line">        self.set_cookie(key, max_age=0, path=path, domain=domain,</span><br><span class="line">                        expires=&apos;Thu, 01-Jan-1970 00:00:00 GMT&apos;)</span><br><span class="line">    </span><br><span class="line">    ##  rep = redirect(&quot;/login/&quot;)  redirect也是继承Response</span><br><span class="line">    ##  rep.delete_cookie(&quot;login&quot;)</span><br><span class="line"></span><br><span class="line">class HttpResponse(HttpResponseBase):</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>所有与相应有关的信息都在response文件中，都继承自Base基类<br>Cookie本身最大支持4096字节，以及Cookie本身保存在客户端，可能被拦截或窃取</p>
</blockquote>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>Session能支持更多的字节，并且他保存在服务器，有较高的安全性<br>问题来了，基于HTTP协议的无状态特征，服务器根本就不知道访问者是“谁”。那么上述的Cookie就起到桥接的作用</p>
<blockquote>
<p>我们可以给每个客户端的Cookie分配一个唯一的id，这样用户在访问时，通过Cookie，服务器就知道来的人是“谁”。然后我们再根据不同的Cookie的id，在服务器上保存一段时间的私密资料，如“账号密码”等等。<br>总结而言：Cookie弥补了HTTP无状态的不足，让服务器知道来的人是“谁”；但是Cookie以文本的形式保存在本地，自身安全性较差；所以我们就通过Cookie识别不同的用户，对应的在Session里保存私密的信息以及超过4096字节的文本。<br>另外，Cookie和Session其实是共通性的东西，不限于语言和框架</p>
<ul>
<li><strong>session保存在服务器，但是由于http协议是无状态的，为了让session和用户对应起来，cookie就成为了桥接</strong></li>
<li><strong>服务器生成session，保存相对重要的信息(账号，密码等)，同时生成session_id,返回客户端浏览器，保存在cookie中</strong></li>
<li><strong>浏览器再次访问就携带session_id，服务器判断有没有对应的session确认用户状态。</strong></li>
<li>设置session基于SessionBase类</li>
</ul>
</blockquote>
<h3 id="session步骤"><a href="#session步骤" class="headerlink" title="session步骤"></a>session步骤</h3><p>1，用户登陆，生成字典{key, value},将字典存入session,key是自动生成的字符串标识,返回的cookie,value是自定义字典<br>2，在1生成的字典value中自定义格式存储用户信息,如user信息——|  {key—session_id : value—session}<br>3，django调用session，cookie有服务端自动生成，写入浏览器cookie中，每个浏览器有自己的cookie值，是session寻找用户信息的唯一标识， 后台接受的request.session等价于key对应的value<br>4，session依赖于cookie，因为http协议无状态，要标记身份<br>5,Cookie具有不可跨域名性。根据Cookie规范，浏览器访问Google只会携带Google的Cookie，而不会携带Baidu的Cookie<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request.session[&apos;k1&apos;]   # 获取k1的值，不存在则报错</span><br><span class="line">request.session.get(&apos;k1&apos;,None)  # 获取k1的值，不存在则返回None</span><br><span class="line">del request.session[&apos;k1&apos;]   # 删除k1</span><br><span class="line"></span><br><span class="line">键，值，键值对操作</span><br><span class="line">request.session.keys()  # 提取所有键</span><br><span class="line">request.session.values()    # 提取所有值</span><br><span class="line">request.session.delete(&apos;session_key&apos;)   # 删除当前用户的所有session数据</span><br><span class="line">request.session.clear()     # 清除用户的所有session数据，用于注销</span><br><span class="line"></span><br><span class="line"># 删除当前的会话数据并删除会话的Cookie。</span><br><span class="line">request.session.flush() </span><br><span class="line">    这用于确保前面的会话数据不可以再次被用户的浏览器访问</span><br><span class="line">    例如，django.contrib.auth.logout() 函数中就会调用它。</span><br><span class="line"></span><br><span class="line">request.session.set_expiry(value): 设置session超时时间，默认2周</span><br><span class="line">    # 如果value是个整数，session会在value秒后失效,</span><br><span class="line">    # 如果value是个datatime或timedelta，session会在这个时间后失效</span><br><span class="line">    # 如果value是0，用户关闭游览器session会失效</span><br><span class="line">    # 如果value是None,session会依赖全局session失效策略</span><br></pre></td></tr></table></figure></p>
<ul>
<li>SessionBase<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class SessionBase:</span><br><span class="line">    # 所有session会话的基类</span><br><span class="line">    TEST_COOKIE_NAME = &apos;testcookie&apos;</span><br><span class="line">    TEST_COOKIE_VALUE = &apos;worked&apos;</span><br><span class="line">    ......</span><br><span class="line">    def clear(self):</span><br><span class="line">        # 为避免不必要的持久存储访问</span><br><span class="line">        # 加载数据浪费时间，所以将它设置为空dict</span><br><span class="line">        self._session_cache = &#123;&#125;</span><br><span class="line">        self.accessed = True</span><br><span class="line">        self.modified = True</span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line">    def set_expiry(self, value):</span><br><span class="line">        # ``value``可以是整数，Python``datetime``或``timedelta``对象或``None``。</span><br><span class="line"></span><br><span class="line">        # 如果``value``是一个整数，那么会话将在对应时间后到期</span><br><span class="line">        # 如果设置为“0”，则浏览器关闭会话到期。</span><br><span class="line">        # 如果``value``是``datetime``或``timedelta``对象，那么会话将在特定的未来时间到期。</span><br><span class="line">        # 如果``value``是``None``，则会话使用全局会话到期(默认为2周)</span><br><span class="line">        </span><br><span class="line">        if value is None:</span><br><span class="line">            # Remove any custom expiration for this session.</span><br><span class="line">            try:</span><br><span class="line">                del self[&apos;_session_expiry&apos;]</span><br><span class="line">            except KeyError:</span><br><span class="line">                pass</span><br><span class="line">            return</span><br><span class="line">        if isinstance(value, timedelta):</span><br><span class="line">            value = timezone.now() + value</span><br><span class="line">        self[&apos;_session_expiry&apos;] = value</span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line">    def flush(self):</span><br><span class="line">        # 从数据库中删除当前会话数据并重新生成键</span><br><span class="line">        self.clear()</span><br><span class="line">        self.delete()</span><br><span class="line">        self._session_key = None</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="django中默认session"><a href="#django中默认session" class="headerlink" title="django中默认session"></a>django中默认session</h3><ul>
<li>django默认支持5中session<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 数据库Session</span><br><span class="line">SESSION_ENGINE = &apos;django.contrib.sessions.backends.db&apos;   # 引擎（默认）</span><br><span class="line"></span><br><span class="line">2. 缓存Session</span><br><span class="line">SESSION_ENGINE = &apos;django.contrib.sessions.backends.cache&apos;  # 引擎</span><br><span class="line">SESSION_CACHE_ALIAS = &apos;default&apos;                            </span><br><span class="line"># 使用的缓存别名（默认内存缓存，也可以是memcache），此处别名依赖缓存的设置</span><br><span class="line"></span><br><span class="line">3. 文件Session</span><br><span class="line">SESSION_ENGINE = &apos;django.contrib.sessions.backends.file&apos;    # 引擎</span><br><span class="line">SESSION_FILE_PATH = None                                    </span><br><span class="line"># 缓存文件路径，如果为None，则使用tempfile模块获取一个临时地址tempfile.gettempdir() </span><br><span class="line"></span><br><span class="line">4. 缓存+数据库</span><br><span class="line">SESSION_ENGINE = &apos;django.contrib.sessions.backends.cached_db&apos;        # 引擎</span><br><span class="line"></span><br><span class="line">5. 加密Cookie Session</span><br><span class="line">SESSION_ENGINE = &apos;django.contrib.sessions.backends.signed_cookies&apos;   # 引擎</span><br><span class="line"></span><br><span class="line">其他公用设置项：</span><br><span class="line">SESSION_COOKIE_NAME ＝ &quot;sessionid&quot;                       </span><br><span class="line"># Session的cookie保存在浏览器上时的key，即：sessionid＝随机字符串（默认）</span><br><span class="line">SESSION_COOKIE_PATH ＝ &quot;/&quot;                              </span><br><span class="line"> # Session的cookie保存的路径（默认）</span><br><span class="line">SESSION_COOKIE_DOMAIN = None                             </span><br><span class="line"># Session的cookie保存的域名（默认）</span><br><span class="line">SESSION_COOKIE_SECURE = False                            </span><br><span class="line"># 是否Https传输cookie（默认）</span><br><span class="line">SESSION_COOKIE_HTTPONLY = True                           </span><br><span class="line"># 是否Session的cookie只支持http传输（默认）</span><br><span class="line">SESSION_COOKIE_AGE = 1209600                             </span><br><span class="line"># Session的cookie失效日期（2周）（默认）</span><br><span class="line">SESSION_EXPIRE_AT_BROWSER_CLOSE = False                  </span><br><span class="line"># 是否关闭浏览器使得Session过期（默认）</span><br><span class="line">SESSION_SAVE_EVERY_REQUEST = False                       </span><br><span class="line"># 是否每次请求都保存Session，默认修改之后才保存（默认）</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="django自身的login和logout"><a href="#django自身的login和logout" class="headerlink" title="django自身的login和logout"></a>django自身的login和logout</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def login(request, user, backend=None):</span><br><span class="line">    ......</span><br><span class="line">    request.session[SESSION_KEY] = user._meta.pk.value_to_string(user)</span><br><span class="line">    request.session[BACKEND_SESSION_KEY] = backend</span><br><span class="line">    request.session[HASH_SESSION_KEY] = session_auth_hash</span><br><span class="line">    </span><br><span class="line">def logout(request):</span><br><span class="line">    ......</span><br><span class="line">    request.session.flush()  # 调用session的flush 从数据库中删除当前会话数据</span><br></pre></td></tr></table></figure>
<h2 id="Session的生命周期"><a href="#Session的生命周期" class="headerlink" title="Session的生命周期"></a>Session的生命周期</h2><p>Session保存在服务器端。<br>为了获得更高的存取速度，服务器一般把Session放在内存里。每个用户都会有一个独立的Session。如果Session内容过于复杂，当大量客户访问服务器时可能会导致内存溢出。因此，Session里的信息应该尽量精简<br>Session在用户第一次访问服务器的时候自动创建,只访问静态页面不会生成session<br>Session生成后，只要用户继续访问，服务器就会更新Session的最后访问时间，并维护该Session</p>
<h2 id="Session的有效期"><a href="#Session的有效期" class="headerlink" title="Session的有效期"></a>Session的有效期</h2><p>由于会有越来越多的用户访问服务器，因此Session也会越来越多。<br>为防止内存溢出，服务器会把长时间内没有活跃的Session从内存删除。这个时间就是Session的超时时间。如果超过了超时时间没访问过服务器，Session就自动失效了</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>状态保持</tag>
      </tags>
  </entry>
  <entry>
    <title>日常01</title>
    <url>/2019/10/21/%E6%97%A5%E5%B8%B801/</url>
    <content><![CDATA[<p><img src="https://github.com/dengjinshan/imageHub/raw/master/%E6%97%A5%E5%B8%B801/qj6153067884.jpg"></p>
<p><center>风景长宜放眼量</center><br><a id="more"></a></p>
<p>总是在不自觉中浪费了时间，搭建这个博客，本来也应该是很简单的事情，断断续续的拖了快一个月，拖延症确实是学习的克星啊。<br>2019年眼见就见底了，希望自己能在最后的2个月中多学习一点知识，多进步一些，不要让年末的时候对自己太失望。</p>
<h2 id="目标什么的也就不立了，希望学习感悟能在博客上不断更新，就这样吧"><a href="#目标什么的也就不立了，希望学习感悟能在博客上不断更新，就这样吧" class="headerlink" title="目标什么的也就不立了，希望学习感悟能在博客上不断更新，就这样吧"></a>目标什么的也就不立了，希望学习感悟能在博客上不断更新，就这样吧</h2>]]></content>
      <categories>
        <category>个人</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
